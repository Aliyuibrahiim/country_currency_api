const express = require('express');
const mysql = require('mysql2/promise');
const axios = require('axios');
const cors = require('cors');
const fs = require('fs');
const path = require('path');
require('dotenv').config();

const app = express();
app.use(express.json());
app.use(cors());

// Database configuration
const dbConfig = {
    host: process.env.DB_HOST,
    user: process.env.DB_USER,
    password: process.env.DB_PASSWORD,
    database: process.env.DB_NAME,
    port: 3306,
    acquireTimeout: 60000,
    connectTimeout: 60000,
    timeout: 60000,
    reconnect: true,
    connectionLimit: 10
};

const pool = mysql.createPool(dbConfig);
let lastRefreshTime = null;

// Helper functions
async function getConnection() {
    return await pool.getConnection();
}

function getRandomNumber(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
}

// Simple text-based image generation (ASCII art)
function generateSummaryImage() {
    try {
        const imagePath = path.join(__dirname, 'cache', 'summary.txt');
        
        const summaryContent = `
==================================
    COUNTRY CURRENCY API SUMMARY
==================================

âœ… API Status: Running
ðŸ“Š Total Countries: [COUNT_PLACEHOLDER]
ðŸ•’ Last Refresh: [TIME_PLACEHOLDER]
ðŸ“ˆ Top Countries by GDP:
   [TOP_COUNTRIES_PLACEHOLDER]

Generated by Country Currency API
        `.trim();

        fs.writeFileSync(imagePath, summaryContent);
        console.log('Summary "image" generated successfully');
        return true;
        
    } catch (error) {
        console.error('Error generating summary:', error);
        return false;
    }
}

// 1. POST /countries/refresh - Fetch and cache countries
app.post('/countries/refresh', async (req, res) => {
    let connection;
    try {
        connection = await getConnection();
        
        console.log('Fetching countries data from external API...');
        const countriesResponse = await axios.get(
            'https://restcountries.com/v2/all?fields=name,capital,region,population,flag,currencies',
            { timeout: 30000 }
        );
        
        console.log('Fetching exchange rates from external API...');
        const exchangeResponse = await axios.get(
            'https://open.er-api.com/v6/latest/USD',
            { timeout: 30000 }
        );
        const exchangeRates = exchangeResponse.data.rates;
        
        const countries = countriesResponse.data;
        let processedCount = 0;
        let successCount = 0;
        
        console.log(`Processing ${countries.length} countries...`);
        
        // Clear existing data for fresh refresh
        await connection.execute('DELETE FROM countries');
        
        for (const country of countries.slice(0, 100)) { // Process 100 countries for speed
            try {
                let currencyCode = null;
                let exchangeRate = null;
                let estimatedGDP = null;
                
                // Get first currency if available and valid
                if (country.currencies && country.currencies.length > 0 && 
                    country.currencies[0].code && country.currencies[0].code !== 'undefined') {
                    currencyCode = country.currencies[0].code;
                    
                    // Match currency code with exchange rates (case-sensitive)
                    if (currencyCode && exchangeRates[currencyCode]) {
                        exchangeRate = parseFloat(exchangeRates[currencyCode]);
                        const randomMultiplier = getRandomNumber(1000, 2000); // 1000-2000
                        estimatedGDP = (country.population * randomMultiplier) / exchangeRate;
                    }
                }
                
                // Insert country record (always insert, we cleared the table)
                await connection.execute(
                    `INSERT INTO countries 
                     (name, capital, region, population, currency_code, exchange_rate, estimated_gdp, flag_url) 
                     VALUES (?, ?, ?, ?, ?, ?, ?, ?)`,
                    [
                        country.name,
                        country.capital || null,
                        country.region || null,
                        country.population,
                        currencyCode,
                        exchangeRate,
                        estimatedGDP,
                        country.flag || null
                    ]
                );
                
                successCount++;
                processedCount++;
                
            } catch (countryError) {
                console.error(`Error processing ${country.name}:`, countryError.message);
                processedCount++;
                continue;
            }
        }
        
        lastRefreshTime = new Date().toISOString();
        
        // Generate summary
        await generateSummaryImage();
        
        res.status(201).json({
            message: `Successfully refreshed ${successCount} countries`,
            total_countries: successCount,
            last_refreshed_at: lastRefreshTime
        });
        
    } catch (error) {
        console.error('Refresh failed:', error);
        
        if (error.code === 'ECONNREFUSED' || error.response) {
            return res.status(503).json({
                error: 'External data source unavailable',
                details: `Could not fetch data from external API`
            });
        }
        
        res.status(500).json({ error: 'Internal server error' });
    } finally {
        if (connection) connection.release();
    }
});

// 2. GET /countries - Get all countries with filtering and sorting
app.get('/countries', async (req, res) => {
    let connection;
    try {
        const { region, currency, sort } = req.query;
        
        connection = await getConnection();
        
        let query = 'SELECT * FROM countries WHERE 1=1';
        const params = [];
        
        // Filter by region
        if (region) {
            query += ' AND LOWER(region) = LOWER(?)';
            params.push(region);
        }
        
        // Filter by currency
        if (currency) {
            query += ' AND currency_code = ?';
            params.push(currency.toUpperCase());
        }
        
        // Sorting
        if (sort === 'gdp_desc') {
            query += ' ORDER BY estimated_gdp DESC NULLS LAST';
        } else if (sort === 'gdp_asc') {
            query += ' ORDER BY estimated_gdp ASC NULLS LAST';
        } else if (sort === 'population_desc') {
            query += ' ORDER BY population DESC';
        } else if (sort === 'population_asc') {
            query += ' ORDER BY population ASC';
        } else {
            query += ' ORDER BY name ASC';
        }
        
        const [countries] = await connection.execute(query, params);
        
        res.json(countries);
        
    } catch (error) {
        console.error('Error fetching countries:', error);
        res.status(500).json({ error: 'Internal server error' });
    } finally {
        if (connection) connection.release();
    }
});

// 3. GET /countries/:name - Get one country by name
app.get('/countries/:name', async (req, res) => {
    let connection;
    try {
        const countryName = req.params.name;
        
        if (!countryName || countryName.trim() === '') {
            return res.status(400).json({ error: 'Country name is required' });
        }
        
        connection = await getConnection();
        
        const [countries] = await connection.execute(
            'SELECT * FROM countries WHERE LOWER(name) = LOWER(?)',
            [countryName.trim()]
        );
        
        if (countries.length === 0) {
            return res.status(404).json({ error: 'Country not found' });
        }
        
        res.json(countries[0]);
        
    } catch (error) {
        console.error('Error fetching country:', error);
        res.status(500).json({ error: 'Internal server error' });
    } finally {
        if (connection) connection.release();
    }
});

// 4. DELETE /countries/:name - Delete a country record
app.delete('/countries/:name', async (req, res) => {
    let connection;
    try {
        const countryName = req.params.name;
        
        if (!countryName || countryName.trim() === '') {
            return res.status(400).json({ error: 'Country name is required' });
        }
        
        connection = await getConnection();
        
        const [result] = await connection.execute(
            'DELETE FROM countries WHERE LOWER(name) = LOWER(?)',
            [countryName.trim()]
        );
        
        if (result.affectedRows === 0) {
            return res.status(404).json({ error: 'Country not found' });
        }
        
        res.status(204).send();
        
    } catch (error) {
        console.error('Error deleting country:', error);
        res.status(500).json({ error: 'Internal server error' });
    } finally {
        if (connection) connection.release();
    }
});

// 5. GET /status - Show total countries and last refresh timestamp
app.get('/status', async (req, res) => {
    let connection;
    try {
        connection = await getConnection();
        
        const [[{ total_countries }]] = await connection.execute(
            'SELECT COUNT(*) as total_countries FROM countries'
        );
        
        const [[{ last_refreshed_at }]] = await connection.execute(
            'SELECT MAX(last_refreshed_at) as last_refreshed_at FROM countries'
        );
        
        res.json({
            total_countries,
            last_refreshed_at: last_refreshed_at || lastRefreshTime
        });
        
    } catch (error) {
        console.error('Error fetching status:', error);
        res.status(500).json({ error: 'Internal server error' });
    } finally {
        if (connection) connection.release();
    }
});

// 6. GET /countries/image - Serve summary as text file (simplest image alternative)
app.get('/countries/image', (req, res) => {
    const imagePath = path.join(__dirname, 'cache', 'summary.txt');
    
    if (!fs.existsSync(imagePath)) {
        return res.status(404).json({ error: 'Summary image not found' });
    }
    
    res.setHeader('Content-Type', 'text/plain');
    res.sendFile(imagePath);
});

// Health check endpoint
app.get('/', (req, res) => {
    res.json({ 
        message: 'Country Currency API is running!',
        endpoints: {
            'POST /countries/refresh': 'Fetch from external APIs and cache countries',
            'GET /countries': 'Get all countries with filters (?region=Africa&currency=NGN&sort=gdp_desc)',
            'GET /countries/:name': 'Get specific country',
            'DELETE /countries/:name': 'Delete country',
            'GET /status': 'Get API status',
            'GET /countries/image': 'Get summary text file'
        }
    });
});

// Start server
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
    console.log(`ðŸš€ Server running on port ${PORT}`);
});

module.exports = app;